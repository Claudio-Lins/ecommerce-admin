generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id     String @id @default(uuid())
  name   String
  userId String

  billboards Billboard[] @relation("StoreToBillborad")
  categories Category[]  @relation("StoreToCategory")
  products   Product[]   @relation("StoreToProduct")
  sizes      Size[]      @relation("StoreToSize")
  // ingredients Ingredient[] @relation("StoreToIngredient")
  orders     Order[]     @relation("StoreToOrder")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillborad", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String // Foreign Key to Billboard
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[] @relation("CategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id              String          @id @default(uuid())
  storeId         String // Foreign Key to Store
  store           Store           @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId      String // Foreign Key to Category
  category        Category        @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name            String
  productDetailId String
  productDetail   ProductDetail[]
  ingredients     String
  isFeatured      Boolean         @default(false)
  isArchived      Boolean         @default(false)
  sizeId          String
  size            Size            @relation(fields: [sizeId], references: [id])
  orderItems      OrderItem[] // Relation to Order model
  images          Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([productDetailId])
}

model ProductDetail {
  id              String    @id @default(uuid())
  productId       String // Foreign Key to Product
  products        Product[]
  price           Decimal
  weight          String
  quantityInStock Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Size {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
